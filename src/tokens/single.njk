---
layout: default
eleventyComputed:
  title: {{ (token.title.rendered | safe) + "(" + (token.acf.symbol | upper) + ")" }}
pagination:
  data: tokens
  size: 1
  alias: token
  addAllPagesToCollections: true
permalink: '/token/{{ token.slug }}/'
---

{% set description = "ðŸ‘‰ 65% cheaper than Uniswap to swap tokens. ðŸ‘‰ Earn a 250% staking APR while passively investing in a basket of 16 ERC-20 tokens!" %}

<section class="md:container mx-4 md:mx-auto">
	<h1 class="fluid text-center dark:text-primary-100">{{ token.title.rendered | safe }} ({{ token.acf.symbol | upper }})</h1>

  <div class="flex justify-center mt-4 space-x-2">
    <a class="btn-outline rounded-full" href="https://etherscan.io/address/{{ token.acf.contract_address }}" target="_blank">Etherscan</a>
    
    {% if token.acf.website %}
      <a class="btn-outline rounded-full" href="{{ token.acf.website }}" target="_blank">Website</a>
    {% endif %}
    {% if token.acf.twitter %}
      <a class="btn-outline rounded-full" href="{{ token.acf.twitter }}" target="_blank">Twitter</a>
    {% endif %}
    {% if token.acf.telegram %}
      <a class="btn-outline rounded-full" href="{{ token.acf.telegram }}" target="_blank">Telegram</a>
    {% endif %}
    {% if token.acf.discord %}
      <a class="btn-outline rounded-full" href="{{ token.acf.discord }}" target="_blank">Discord</a>
    {% endif %}
  </div>

  <div class="relative mt-16 space-y-4 p-4 md:p-8 pt-4 bg-primary-700 rounded-lg md:rounded-3xl overflow-hidden">
		<div class="oval-gradient -top-80 -left-80"></div>

		{# TVL and DFP2 MC #}
		<div class="relative grid grid-cols-1">
			<div class="z-10 flex flex-col justify-between rounded-lg bg-white dark:bg-primary-800 content-between">
				<div class="py-8 px-4" id="price">
					<h2 class="text-2xl">{{ token.acf.symbol }} price</h2>
					<h3 class="text-2xl font-bold text-primary-700 dark:text-primary-100">{% include "partials/loading-indicator.njk" %}</h3>
					<p class="text-base text-primary-700 dark:text-primary-100">Today</p>
				</div>
				<canvas id="priceChart" width="800" height="250"></canvas>
			</div>
		</div>
	</div>

{# <p>Launch date: {{ token.date | wpDateToString }}</p> #}
  <article class="prose dark:prose-invert mx-auto mt-10">
    {{ token.content.rendered | wpUrls | safe }}
  </article>

  <div class="md:max-w-[65ch] mx-auto mt-16">
    <h2 class="text-4xl font-light text-center dark:text-primary-100">Swap <strong class="text-primary-500 dark:text-white">{{ token.title.rendered }}</strong> for only 0.1% fee on DefiPlaza</h2>
    <div class="max-w-[65ch] mx-auto mt-4">
      <p>Trade {{ token.acf.symbol | upper }} for one of the other 15 most popular DeFI tokens on DefiPlaza. DefiPlaza offers 120 direct trading pairs and you can swap for a 0,1% fee. That is 65% less fee then on UniSwap!</p>
      <a class="btn-primary text-center mt-4" href="https://app.defiplaza.net/swap?from={{ token.acf.symbol }}" target="_blank">Swap ${{ token.acf.symbol | upper }}</a>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js" integrity="sha256-bC3LCZCwKeehY6T4fFi9VfOU0gztUa+S4cnkIhVPZ5E=" crossorigin="anonymous"></script>
<script src="https://unpkg.com/dayjs@1.8.21/dayjs.min.js"></script>
<script src="https://unpkg.com/dayjs@1.8.21/plugin/relativeTime.js"></script>

<script type="text/javascript">
document.addEventListener("DOMContentLoaded", function() {
    
  const address = "{{ token.acf.contract_address }}";
    
    console.log(address);
	const queryBody = JSON.stringify({
    	query: `{
    	    dailyTokens(first: 60, where: { token:\"${ address}\" }, orderBy: date, orderDirection: desc) {
                date
                tokenPriceUSD
                tokenPriceMin
                tokenPriceMax
            }
    	}`
	});
	
	fetch('https://api.thegraph.com/subgraphs/name/omegasyndicate/defiplaza', {
			method: 'post',
			headers: {
				'Content-Type': 'application/json'
			},
			body: queryBody
		})
		.then(function(result) { return result.json() })
		.then(function(jsonResult) {
		    return jsonResult.data;
		})
	    .then(function(graphData) {
		    graphData.dailyTokens.reverse();
		    
		    priceChart(graphData.dailyTokens);
 		});

});

let chartScales = {
	y: {
		beginAtZero: true,
		position: 'right',
		ticks: {
			color: "#23211f",
			font: {
				size: 12
			},
      	// Include a dollar sign in the ticks
			callback: function (value, index, values) {
				return prettyDollar(parseFloat(value));
			},
		},
		/*grid: {
			borderColor: 'rgb(236, 198, 168)',
			color: 'rgba(47, 79, 126, 0.1)',
		},*/
		grid: {
			display: false,
			drawBorder: false,
		},
		display: false
	},
	x: {
		/*grid: {
			borderColor: 'rgb(236, 198, 168)',
			color: 'rgba(47, 79, 126, 0.1)',
		},*/
		ticks: {
			color: "#23211f",
			font: {
				size: 12
			},
			/*callback: function(val, index) {
            // Hide every 2nd tick label
            return index % 7 === 0 ? this.getLabelForValue(val) : '';
          }*/
		},
		grid: {
			display: false,
			drawBorder: false,
		},
		display: false
	},
};

function prettyDollar(value) {
    return "$" + prettyValue(value);
}
function prettyValue(value) {
    var size = "M";
	var prettyValue;
			
	if(value < 1) {
		prettyValue = Math.round(value*1000)/1000;
		size = ""
	} else if(value < 1000) {
		prettyValue = Math.round(value*100)/100;
		size = ""
	} else if(value < 10000) {
		prettyValue = Math.round(value/10)/100;
		size = "K"
	} else if(value < 100000) {
		prettyValue = Math.round(value/1000);
		size = "K"
	} else if(value < 1000000) {
		prettyValue = Math.round(value/1000);
		size = "K"
	} else {
		prettyValue = Math.round(value/10000)/100;
	}

    return ("" + prettyValue) + size;
}

function priceChart(dailies) {
	lineChart('price', 'Price in USD', dailies, 'tokenPriceUSD', false);
}

let width, height, gradient;
function getGradient(ctx, chartArea, from, to) {
  const chartWidth = chartArea.right - chartArea.left;
  const chartHeight = chartArea.bottom - chartArea.top;
  if (!gradient || width !== chartWidth || height !== chartHeight) {
    // Create the gradient because this is either the first render
    // or the size of the chart has changed
    width = chartWidth;
    height = chartHeight;
    gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
    gradient.addColorStop(0, to);
    gradient.addColorStop(0.75, from);
    gradient.addColorStop(1, from);

  }

  return gradient;
}
let weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

function lineChart(id, label, dataPoints, dataPoint, fill) {
	let labels = [];
	let data = [];
	let pointBorderColors = [];
	let pointBackgroundColors = [];

	for (let point of dataPoints) {
		let date = new Date(point.date * 1000);
		labels.push(weekdays[date.getDay()] + ' ' + date.getDate() + '/' + (date.getMonth() + 1));
		data.push(point[dataPoint]);
	}

	document.querySelector(`#${id} h3`).innerText = prettyDollar(data[data.length - 1]);

	labels[labels.length - 1] = 'Today';
	pointBorderColors[pointBorderColors.length - 1] = 'rgba(47, 79, 126, 0.5)';
	pointBackgroundColors[pointBackgroundColors.length - 1] = 'rgba(47, 79, 126, 0.2)';

	let primaryColor = '#3d0283';
	let backgroundColor = '#fff';
	if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
		// dark mode
		primaryColor = '#dcceee';
		backgroundColor = '#32036a';
	}

	const ctx = document.getElementById(id + 'Chart').getContext('2d');
	const myChart = new Chart(ctx, {
		type: 'line',
		data: {
			labels: labels,
			datasets: [
				{
					label: label,
					data: data,
					backgroundColor: function(context) {
						const chart = context.chart;
						const {ctx, chartArea} = chart;

						if (!chartArea) {
							// This case happens on initial chart load
							return;
						}
						return getGradient(ctx, chartArea, primaryColor + '80', backgroundColor);
					},
					borderWidth: 3,
					fill: fill,
					borderColor: primaryColor,
					pointRadius: 0,
					pointHoverRadius: 6,
					pointHoverBorderWidth: 2,
					pointHoverBorderColor: primaryColor,
					pointHoverBackgroundColor: '#ffffff80',
					lineTension: 0.05,
					segment: {
						borderDash: function (ctx) {
							if (ctx.p0DataIndex == data.length - 2) {
								return [2, 2];
							}
							return undefined;
						},
					},
				},
			],
		},
		options: {
			interaction: {
				mode: 'index',
				intersect: false,
			},
			plugins: {
				legend: {
					display: false,
				},
				tooltip: {
					enabled: false,
					position: 'nearest',
					usePointStyle: true,
					external: function(context) {
						var raw = context.tooltip.dataPoints[0].raw;
						var title = context.tooltip.title[0];
						
						document.querySelector(`#${id} h3`).innerText = prettyDollar(raw);
						document.querySelector(`#${id} p`).innerText = title;

					}
				}			
			},
			scales: chartScales
		},
	});
}

</script>